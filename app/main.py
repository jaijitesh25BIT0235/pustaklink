# app/main.py — autogenerated safe launcher that auto-imports models before create_all
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os
import pkgutil
import importlib

from app.db.base import Base
from app.db.session import engine
from app.db.init_db import seed_if_empty

# import API routers (these import schemas but must come after models import in many setups)
from app.api import auth, listings, reports, isbn

def create_app():
    app = FastAPI(title="PustakLink API", version="1.0.0")
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_methods=["*"],
        allow_headers=["*"],
        allow_credentials=True,
    )
    app.include_router(auth.router, prefix="/auth", tags=["Auth"])
    app.include_router(listings.router, prefix="/listing", tags=["Listing"])
    app.include_router(reports.router, prefix="/report", tags=["Report"])
    app.include_router(isbn.router, prefix="/isbn", tags=["ISBN"])
    return app

app = create_app()

# --- Auto-import all model modules so SQLAlchemy can resolve foreign keys ---
_models_dir = os.path.join(os.path.dirname(__file__), "models")
if os.path.isdir(_models_dir):
    for _finder, _name, _ispkg in pkgutil.iter_modules([_models_dir]):
        try:
            importlib.import_module(f"app.models.{_name}")
        except Exception:
            # intentionally swallow import errors here; they will surface later if real
            pass
# --- end auto-import ---

# create DB tables (after models imported)
Base.metadata.create_all(bind=engine)

@app.on_event("startup")
async def startup_event():
    # seed DB if empty (init_db.seed_if_empty)
    seed_if_empty()

